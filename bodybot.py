import telebot
from telebot import types
import menu
import json
import functions as func
import requests
import languageModule
from languageModule import translator as tran
import talkingModule
import time
from logger import dump as log

try:
    with open ('token.json', 'r', encoding='UTF-8') as tk:
        API_TOKEN = (json.load(tk))
except:
    print('–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω')
    new_token = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API-—Ç–æ–∫–µ–Ω:\n")
    try:
        with open ('token.json', 'w', encoding='UTF-8') as tk:
            tk.write(json.dumps(new_token, ensure_ascii=False))
        time.sleep(3)
        with open ('token.json', 'r', encoding='UTF-8') as tk:
            API_TOKEN = (json.load(tk))
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
try:
    bot = telebot.TeleBot(API_TOKEN)
    print('–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
except:
    print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.')

API_URL = 'https://7012.deeppavlov.ai/model'

user = 'anonymus*'
load_status = False
dialog = 0 
# 0 - —Å—Ç–æ–ø
# 1 - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–≤—ã–∫–∞
# 2 - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
# 3 - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
# 9 - –∏—Å—Ö–æ–¥—è—â–∏–µ
menu_choise = ''
replic = '–ø—É—Å—Ç–æ–π —Ä–µ—Å–ø–æ–Ω–∑'
vacancy = ''
need_skill = []

def error(message, info, description='–ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å'):
    global user
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIHM2QEpe_v0Vn-YUI1w2QGZIFY6r_nAAJCBwACRvusBH1aiEB35lPMLgQ') #'CAACAgIAAxkBAAIDjmP8y9nCt64diU-3bguNT_3csgABlQACagEAAs6YzRYbIlPARgMMCC4E')
    bot.send_message(message.chat.id, description)
    try:
        log(user,message.text,description,"–ù–ï–Ø–í–ù–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï")
    except:
        print('–°–±–æ–π –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:')
        print(user,message.text,description,info)

@bot.message_handler(commands=['start'])
def start_message(message):
    global user
    global load_status
    try:
        bot.send_message(message.chat.id, "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        user=message.from_user.id
        output = func.load(user)
        load_status = True
        print(f"user={message.from_user.id}")
    #    print(message)
        bot.send_message(message.chat.id, output)
        # telebot.types.InlineKeyboardButton('–º–µ–Ω—é', callback_data='–º–µ–Ω—é')
        # bot.send_message(message.chat_id, text='–ú–µ–Ω—é')
    except:
        error(message, '–Ω–µ —É–¥–∞—ë—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∞–Ω—Å', '–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ start_message')

@bot.message_handler(commands=['menu'])#, regexp='–º–µ–Ω—é')
def gui_menu(message):
    choise = telebot.types.InlineKeyboardMarkup()
    choise.add(telebot.types.InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='/demo'))     
    choise.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É', callback_data='/addvac'))
    choise.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ —Ä–µ–∑—é–º–µ', callback_data='/addskill'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='/allvac'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ –æ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='/check'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ü–æ–ª—é–±–æ–≤–∞—Ç—å—Å—è –Ω–∞–≤—ã–∫–∞–º–∏', callback_data='/allskill'))
    choise.add(telebot.types.InlineKeyboardButton(text='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='/rate'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ü–æ–¥–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π', callback_data='/find'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?', callback_data='/help'))
    bot.send_message(message.chat.id, text="–ú–ï–ù–Æ", reply_markup=choise)

@bot.message_handler(regexp='–º–µ–Ω—é')
def gui_menu_from_text(message):
    choise = telebot.types.InlineKeyboardMarkup()
    choise.add(telebot.types.InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='/demo'))     
    choise.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É', callback_data='/addvac'))
    choise.add(telebot.types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ —Ä–µ–∑—é–º–µ', callback_data='/addskill'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='/allvac'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ –æ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='/check'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ü–æ–ª—é–±–æ–≤–∞—Ç—å—Å—è –Ω–∞–≤—ã–∫–∞–º–∏', callback_data='/allskill'))
    choise.add(telebot.types.InlineKeyboardButton(text='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='/rate'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ü–æ–¥–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π', callback_data='/find'))
    choise.add(telebot.types.InlineKeyboardButton(text='–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?', callback_data='/help'))
    bot.send_message(message.chat.id, text="*–ú–ï–ù–Æ*", reply_markup=choise, parse_mode='MARKDOWN')

@bot.callback_query_handler(func=lambda call: True) 
def query_handler(call):
    global menu_choise
    global dialog
    global replic
    message = call.message
    bot.answer_callback_query(callback_query_id=call.id, text='–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É–µ–º')
    answer = ''
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    if call.data == '/demo':
        answer = ('/demo')
        with open (f'vacancy.json', 'r', encoding='UTF-8') as vac:
            func.base_of_vacancis = json.load(vac)
        dialog = 9
        replic = "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"
        out_say(message, 0)
    elif call.data == '/addvac':
        answer = ('/addvac')
        dialog = 9
        replic = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: \n'
        out_say(message, 2)
    elif call.data == '/addskill':
        dialog = 9
        replic = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫ \n–µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —Å–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ø \n'
        out_say(message, 1)
    elif call.data == '/check':
        dialog = 9
        replic = '–í–≤–µ–¥–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é: \n'
        out_say(message, 4)
    elif call.data == '/allvac':
        bot.send_message(message.chat.id, menu.working(call.from_user.id, '/allvac'))
    elif call.data == '/allskill':
        bot.send_message(message.chat.id, menu.working(call.from_user.id, '/allskill'))
    elif call.data == '/rate':
        bot.send_message(message.chat.id, menu.working(call.from_user.id, '/rate'))
    elif call.data == '/find':
        bot.send_message(message.chat.id, menu.working(call.from_user.id, '/find'))
    elif call.data == '/help':
        bot.send_message(message.chat.id, menu.working(call.from_user.id, '/help'))
    # bot.send_message(call.message.chat.id, answer) 
    # menu_choise = answer
    # dialog = 5

#@bot.message_handler(func= lambda message:True, content_types=['text', 'sticker'])

    
@bot.message_handler(regexp='—Å–ø–∞—Å–∏–±–æ')
def thank_user(message):
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIHQ2QErs4HgWCIDatcozgEDaavRlH4AAI2BwACRvusBAqX86rdUV82LgQ')
    bot.send_message(message.chat.id, "–í–µ–∂–ª–∏–≤–æ—Å—Ç—å –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –±–æ—Ç—É —ç—Ç–æ —Ç–∞–∫ –º–∏–ª–æ! ü•∞ _–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å_)", parse_mode='MARKDOWN')
    log(user, message.text, "–æ—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")

#@bot.message_handler(func= lambda message:True, content_types=['text', 'sticker'])


@bot.message_handler(content_types=['text'])
def data_input(message):
    global dialog
    global replic
    global vacancy
    global need_skill

    try:
        if dialog == 1:
            if languageModule.translator((message.text).lower()) != '/stop':
                for skill in ((message.text).lower()).split(';'):
                    func.base_of_skills.append(skill.strip())
                # func.base_of_skills.append(((message.text).lower()).split(';'))
                if (message.text).lower() == '–≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å':
                    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIDfGP8x7p_xx1of1dE_Tft16jDoBI8AAJGIwACZ1aZSQfInwNd_rM3LgQ')
                    bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.')
                log(user, message.text, "–¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –Ω–∞–≤—ã–∫–æ–≤")
            else:
                menu.working(message.from_user.id, '/stop')
                bot.send_message(message.chat.id, '—è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞–≤—ã–∫–∏')
                dialog = 0 
                log(user, message.text, "—Å–æ—Ö—Ä–∞–Ω—è–µ–º")

        elif dialog == 2: 
            if languageModule.translator((message.text).lower()) != '/stop':
                vacancy = (message.text).lower()
                print(f'input vacancy: {vacancy}')
                dialog = 9
                replic = '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–Ω—á–∞—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–°—Ç–æ–ø" \n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (;)'
                log(user, message.text, "–¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –≤–∞–∫–∞–Ω—Å–∏–π")
                out_say(message, 3)            
            else: 
                bot.send_message(message.chat.id, '–∑–∞–ø–∏—Å–∞–ª')
                dialog = 0
                func.add_vacancy(vacancy, need_skill)
                log(user, message.text, "—Å–æ—Ö—Ä–∞–Ω—è–µ–º")
                menu.working(message.from_user.id, '/stop')

        elif dialog == 3:
            if languageModule.translator((message.text).lower()) != '/stop':
                print(f'input text: {message.text}')
                for skill in ((message.text).lower()).split(';'):
                    func.base_of_vacancis.append(skill.strip())
                # need_skill.append((message.text).lower())
                dialog = 3
                log(user, message.text, "–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–∫–∞–Ω—Å–∏–∏")
            else:
                dialog = 9
                replic = '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ø, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'
                out_say(message, 2)
                log(user, message.text, "–∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π")

        elif dialog == 4:
            check = func.check_vac(message.text)
            bot.send_message(message.chat.id, check)
            dialog = 0
            log(user, message.text, "—Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏")

        elif dialog == -1:
            if (languageModule.translator((message.text).lower()) != '/stop') and (languageModule.translator((message.text).lower()) != '/cancel'):
                func.delskill((message.text).lower())
                log(user, message.text, "—É–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–µ —Ç—Ä–æ–≥–∞—è .json")
            else:
                if languageModule.translator((message.text).lower()) == '/cancel':
                    bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤—Å—ë –∫–∞–∫ –±—ã–ª–æ')
                    dialog = 0
                    func.load(user)
                    log(user, message.text, "–≤—ã–ø–æ–ª–Ω—è–µ–º func.load(user)")
                else:
                    menu.working(message.from_user.id, '/stop')
                    bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
                    dialog = 0
                    log(user, message.text, "–≤—ã–ø–æ–ª–Ω—è–µ–º /stop")
        
        elif dialog == -2:
            if (languageModule.translator((message.text).lower()) != '/stop') and (languageModule.translator((message.text).lower()) != '/cancel'):
                func.delvac((message.text).lower())
                log(user, message.text, "–ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–∏")
            else:
                if languageModule.translator((message.text).lower()) == '/cancel':
                    bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤—Å—ë –Ω–∞ –º–µ—Å—Ç–æ')
                    dialog = 0
                    func.load(user)
                    log(user, message.text, "–≤—ã–ø–æ–ª–Ω—è–µ–º func.load(user)")
                else:
                    menu.working(message.from_user.id, '/stop')
                    bot.send_message(message.chat.id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
                    dialog = 0 
                    log(user, message.text, "–≤—ã–ø–æ–ª–Ω—è–µ–º /stop")

        else: 
            log(user, message.text, "–≤—ã–ø–æ–ª–Ω—è–µ–º understand –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
            understand(message)
        
    except:
        error(message, "–°–±–æ–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, —É–¥–∞–ª–µ–Ω–∏–∏ –∏–ª–∏ —á–µ–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏","–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –º–æ–¥—É–ª–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö")


def understand (message):
    global load_status
    global dialog
    global replic
    global menu_choise
    global user
    try:
        if load_status == False:
            user=message.from_user.id
            func.load(user)
            log(user, message.text, "func.load(user)")
            load_status = True
    except:
        error(message, "–æ—à–∏–±–∫–∞ –Ω–∞ –≤—Ö–æ–¥–µ –≤ –º–æ–¥—É–ª—å understand", '–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    
    text = message.text
    print(text)
    
    
    output = '/menu'
    translate = ''

    try:                
        
        if dialog == 5:
            text = menu_choise
            dialog = 0
        
        if dialog == 0:

            translate = languageModule.translator(text)     # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä–µ—á—å –≤ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –±–æ—Ç–∞
            # –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∞–∑—É –≤ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ  
            print(user, message.text, translate)
            log(user, message.text, translate)
            output = str(menu.working(message.from_user.id, translate)) # –∫–æ–º–∞–Ω–¥–∞ —É—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é
        
        
        if output != translate: # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª–∞, –∫—Ä–æ–º–µ —Å–∞–º–æ–π —Å–µ–±—è
            print(output)
            bot.send_message(message.chat.id, output, parse_mode='MARKDOWN')       # (–¥–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–µ–Ω—é)
            log(user, message.text, str(f"{translate} -> –∫–æ–º–∞–Ω–¥–∞ –µ—Å—Ç—å –≤ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "))
        else:   # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å

             # –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–ª–ª–æ–≤:
            if output == '/addskill':
                dialog = 9
                replic = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫ \n–µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —Å–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ø. \n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–≤—ã–∫–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (;)'
                log(user, message.text, str(f"->{translate} : –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫"))
                out_say(message, 1)
                    
            # –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
            elif output == '/addvac':
                dialog = 9
                replic = '–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: \n'
                log(user, message.text, str(f"->{translate} : –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"))
                out_say(message, 2)

            elif output == '/demo':
                with open (f'vacancy.json', 'r', encoding='UTF-8') as vac:
                    func.base_of_vacancis = json.load(vac)
                dialog = 9
                replic = "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"
                log(user, message.text, str(f"->{translate} : –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –≤–∞–∫–∞–Ω—Å–∏–∏"))
                out_say(message, 0)
            
            elif output == '/checkvac':
                dialog = 9
                replic = '–í–≤–µ–¥–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é: \n'
                log(user, message.text, str(f"->{translate} : –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"))
                out_say(message, 4)

            #–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:
            elif output == '/delskill':
                dialog = 9
                replic = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–ø - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ - –¥–ª—è —Å–±—Ä–æ—Å–∞\n'
                log(user, message.text, str(f"->{translate} : –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞"))
                out_say(message, -1)

            #–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π:
            elif output == '/delvac':
                dialog = 9
                replic = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–ø - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ - –¥–ª—è —Å–±—Ä–æ—Å–∞\n'
                log(user, message.text, str(f"->{translate} : –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"))
                out_say(message, -2)


            elif output=='/hello': 
                if (load_status==False or(load_status==True and len(func.base_of_skills)<4)):
                    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIHB2QEjQIBEJD1pZvNYu8YY6WWN0ZHAAI-BwACRvusBK9cOl7BGYj2LgQ')
                    bot.send_message(message.chat.id, func.hello(), parse_mode='MARKDOWN')
                    log(user, message.text, "—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
                else:
                    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIHB2QEjQIBEJD1pZvNYu8YY6WWN0ZHAAI-BwACRvusBK9cOl7BGYj2LgQ')
                    bot.send_message(message.chat.id, '–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –º—ã —Å–Ω–æ–≤–∞ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å!')
                    log(user, message.text, "—Ñ—É–Ω–∫—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")

            elif output=='/bye':
                func.save(message.from_user.id)
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIHRmQEr-xvBpCV-JwHUCsDWaIaPrNeAAIuBwACRvusBPxoaF47DCKVLgQ')
                bot.send_message(message.chat.id, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∞–≤—ã–∫–∏</b>.", parse_mode='HTML')
                log(user, message.text, "–ø—Ä–æ—â–∞–Ω–∏–µ")
              
            # AI –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            else:
    #            bot.send_message(message.chat.id, output)
                try:
                    log(user, message.text, str(f"->{translate} : –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —É –ü–∞–≤–ª–æ–≤–∞"))
                    talking(message)
                except:
                    log(user, message.text, str(f"->{translate} : –ü–∞–≤–ª–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª"))
                    bot.send_message(message.chat.id, str(f'–ó–∞–ø—Ä–æ—Å: {output} \n –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'))
    except:
        error(message, '–æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –º–æ–¥—É–ª—è understand', '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')


def talking(message):
    try:
        quest = talkingModule.vocablary_text(str(message.text))
        print(quest)
        qq = ""
        for word in quest:
            qq = str(qq + word)
        print (qq)
    #    qq = " ".join(quest)
        data = {"question_raw":[qq]}
        print(f'–∑–∞–ø—Ä–æ—Å: {data}')
        try:
            res = requests.post(API_URL, json=data, verify=False).json()
        except:
            error(message, "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", "API –Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å")
            bot.send_message(message.chat.id, f'–ó–∞–ø—Ä–æ—Å: "{qq}" –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å')
        print(res)
        bot.send_message(message.chat.id, res)
    except:
        error(message, '–°—Ç–æ—Ä–æ–Ω–µ–µ API –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–æ—Å—å —Å –∑–∞–¥–∞—á–µ–π', '–¢–∞–∫ —Ö–æ—Ç–µ–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –í–∞–º —á—Ç–æ-–Ω–∏–±—É–¥—å –æ—Å—Ç—Ä–æ—É–º–Ω–æ–µ, –Ω–æ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å')



def out_say(message, step=0):
    global dialog
    global replic
    try:
        if dialog == 9:
            bot.send_message(message.chat.id, replic)
            dialog = step
    except: 
        error(message, "–û—à–∏–±–∫–∞ –≥–¥–µ-—Ç–æ –≤ –¥–∏–∞–ª–æ–≥–µ", '–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–ª–æ–≥')
        

@bot.message_handler(content_types=['sticker'])
def sticker_input(message):
    try:
        print(message.sticker.file_id)
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIHNmQEpr_DbhX4NMDVVmtGL5rPbRrsAAJJBwACRvusBCGgUFw9zcWhLgQ') #'CAACAgIAAxkBAAIDj2P80Kf2YKS55GsH45nircucbFqjAAJBEQACA04JSn3DX5Qm6dIJLgQ')
        bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä –∑–Ω–∞—á–∏–ª? \n(–ø–æ–∫–∞ —ç—Ç–æ —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å)')
    except:
        error(message, "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞")
        

        
bot.polling()